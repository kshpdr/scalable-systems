import { createMemo, mergeProps, splitProps } from "solid-js";
import { Dynamic } from "solid-js/web";
import { callEventHandler } from "./utils";
export function isTrivialHref(href) {
    return !href || href.trim() === "#";
}
const defaultOptions = {
    tabIndex: 0,
};
export function useButtonProps(o) {
    const options = mergeProps(defaultOptions, o);
    const tagName = createMemo(() => {
        if (!options.tagName) {
            if (options.href != null || options.target != null || options.rel != null) {
                return "a";
            }
            else {
                return "button";
            }
        }
        return options.tagName;
    });
    const meta = {
        get tagName() {
            return tagName();
        },
    };
    if (tagName() === "button") {
        return [
            {
                get type() {
                    return options.type || "button";
                },
                get disabled() {
                    return options.disabled;
                },
            },
            meta,
        ];
    }
    const getClickHandler = createMemo(() => (event) => {
        if (options.disabled || (tagName() === "a" && isTrivialHref(options.href))) {
            event.preventDefault();
        }
        if (options.disabled) {
            event.stopPropagation();
            return;
        }
        callEventHandler(options.onClick, event);
    });
    const getKeyDownHandler = createMemo(() => (event) => {
        if (event.key === " ") {
            event.preventDefault();
            getClickHandler()(event /*HACK calling click handler with keyboard event*/);
        }
    });
    const getHref = () => {
        if (tagName() === "a") {
            // Ensure there's a href so Enter can trigger anchor button.
            return options.disabled ? undefined : options.href || "#";
        }
        return options.href;
    };
    return [
        {
            role: "button",
            // explicitly undefined so that it overrides the props disabled in a spread
            // e.g. <Tag {...props} {...hookProps} />
            disabled: undefined,
            get tabIndex() {
                return options.disabled ? undefined : options.tabIndex;
            },
            get href() {
                return getHref();
            },
            get target() {
                return tagName() === "a" ? options.target : undefined;
            },
            get "aria-disabled"() {
                return !options.disabled ? undefined : options.disabled;
            },
            get rel() {
                return tagName() === "a" ? options.rel : undefined;
            },
            get onClick() {
                return getClickHandler();
            },
            get onKeyDown() {
                return getKeyDownHandler();
            },
        },
        meta,
    ];
}
export const Button = (props) => {
    const [local, otherProps] = splitProps(props, ["as"]);
    let a = props.tabIndex;
    const [buttonProps, { tagName }] = useButtonProps({
        tagName: local.as,
        ...otherProps,
    });
    return <Dynamic {...otherProps} {...buttonProps} component={tagName}/>;
};
export default Button;
