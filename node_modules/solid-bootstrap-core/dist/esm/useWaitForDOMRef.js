import ownerDocument from "dom-helpers/ownerDocument";
import canUseDOM from "dom-helpers/canUseDOM";
import { createEffect, createSignal } from "solid-js";
import useWindow from "./useWindow";
export const resolveContainerRef = (ref, document) => {
    if (!canUseDOM)
        return null;
    if (ref == null)
        return (document || ownerDocument()).body;
    if (typeof ref === "function")
        ref = ref();
    if (ref?.nodeType)
        return ref || null;
    return null;
};
export function useWaitForDOMRef(props) {
    const window = useWindow();
    const [resolvedRef, setRef] = createSignal(resolveContainerRef(props.ref, window?.document));
    createEffect(() => {
        if (props.onResolved && resolvedRef()) {
            props.onResolved(resolvedRef());
        }
    });
    createEffect(() => {
        const nextRef = resolveContainerRef(props.ref);
        if (nextRef !== resolvedRef()) {
            setRef(nextRef);
        }
    });
    return resolvedRef;
}
export default useWaitForDOMRef;
