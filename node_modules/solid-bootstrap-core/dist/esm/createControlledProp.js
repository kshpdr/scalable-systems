import { createComputed, createMemo, createSignal, on } from "solid-js";
/**
 * Either returns passed in [value, handler] or creates a signal to control value.
 *
 * @param propValue if controlled
 * @param defaultValue optional default if value not controlled
 * @param handler called in both modes
 * @returns
 */
export function createControlledProp(propValue, defaultValue, handler) {
    const [stateValue, setState] = createSignal(defaultValue());
    const isControlled = createMemo(() => propValue() !== undefined);
    /**
     * If a prop switches from controlled to Uncontrolled
     * reset its value to the defaultValue
     */
    createComputed(on(isControlled, (is, was) => {
        if (!is && was && stateValue() !== defaultValue()) {
            setState(() => defaultValue());
        }
    }));
    const getValue = () => (isControlled() ? propValue() : stateValue());
    const setValue = ((value, ...args) => {
        if (handler)
            handler(value, ...args);
        setState(() => value);
    });
    return [getValue, setValue];
}
