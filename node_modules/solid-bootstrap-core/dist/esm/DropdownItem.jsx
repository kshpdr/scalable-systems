import SelectableContext, { makeEventKey } from "./SelectableContext";
import NavContext from "./NavContext";
import Button from "./Button";
import { dataAttr } from "./DataKey";
import { Dynamic } from "solid-js/web";
import { createMemo, mergeProps, splitProps, useContext, } from "solid-js";
import { callEventHandler } from "./utils";
/**
 * Create a dropdown item. Returns a set of props for the dropdown item component
 * including an `onClick` handler that prevents selection when the item is disabled
 */
export function useDropdownItem(options) {
    const onSelectCtx = useContext(SelectableContext);
    const navContext = useContext(NavContext);
    const { activeKey } = navContext || {};
    const eventKey = makeEventKey(options.key, options.href);
    const isActive = createMemo(() => options.active == null && options.key != null
        ? makeEventKey(activeKey) === eventKey
        : options.active);
    const handleClick = (event) => {
        if (options.disabled)
            return;
        let result = callEventHandler(options.onClick, event);
        if (onSelectCtx && !result.isPropagationStopped) {
            onSelectCtx(eventKey, event);
        }
    };
    return [
        {
            onClick: handleClick,
            get "aria-disabled"() {
                return options.disabled || undefined;
            },
            get "aria-selected"() {
                return isActive();
            },
            [dataAttr("dropdown-item")]: "",
        },
        {
            get isActive() {
                return isActive();
            },
        },
    ];
}
export const DropdownItem = (p) => {
    const [local, props] = splitProps(
    // merge in prop defaults
    mergeProps({ as: Button }, p), 
    // split off local props with rest passed to Dynamic
    ["eventKey", "disabled", "onClick", "active", "as"]);
    const [dropdownItemProps] = useDropdownItem({
        get key() {
            return local.eventKey;
        },
        get href() {
            return props.href;
        },
        get disabled() {
            return local.disabled;
        },
        get onClick() {
            return local.onClick;
        },
        get active() {
            return local.active;
        },
    });
    return <Dynamic component={local.as} {...props} {...dropdownItemProps}/>;
};
export default DropdownItem;
