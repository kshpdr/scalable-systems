import { EventKey } from "./types";
import { JSX, ValidComponent } from "solid-js";
export interface DropdownItemProps<T> extends JSX.HTMLAttributes<T> {
    /**
     * Element used to render the component.
     */
    as?: ValidComponent;
    /**
     * Highlight the menu item as active.
     */
    active?: boolean;
    /**
     * Disable the menu item, making it unselectable.
     */
    disabled?: boolean;
    /**
     * Value passed to the `onSelect` handler, useful for identifying the selected menu item.
     */
    eventKey?: EventKey;
    /**
     * HTML `href` attribute corresponding to `a.href`.
     */
    href?: string;
}
interface UseDropdownItemOptions {
    key?: EventKey | null;
    href?: string;
    active?: boolean;
    disabled?: boolean;
    onClick?: JSX.EventHandlerUnion<HTMLElement, MouseEvent>;
}
/**
 * Create a dropdown item. Returns a set of props for the dropdown item component
 * including an `onClick` handler that prevents selection when the item is disabled
 */
export declare function useDropdownItem(options: UseDropdownItemOptions): readonly [{
    readonly onClick: JSX.EventHandler<HTMLElement, MouseEvent>;
    readonly "aria-disabled": true | undefined;
    readonly "aria-selected": boolean | undefined;
    readonly "data-rr-ui-dropdown-item": "";
}, {
    readonly isActive: boolean | undefined;
}];
export declare const DropdownItem: (p: DropdownItemProps<HTMLButtonElement>) => JSX.Element;
export default DropdownItem;
