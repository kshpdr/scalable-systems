import qsa from "dom-helpers/querySelectorAll";
import addEventListener from "dom-helpers/addEventListener";
import DropdownContext from "./DropdownContext";
import DropdownMenu from "./DropdownMenu";
import DropdownToggle, { isRoleMenu, } from "./DropdownToggle";
import DropdownItem from "./DropdownItem";
import SelectableContext from "./SelectableContext";
import { dataAttr } from "./DataKey";
import useWindow from "./useWindow";
import { createEffect, createSignal, mergeProps, onCleanup, useContext } from "solid-js";
import { createControlledProp } from "./createControlledProp";
import { callEventHandler } from "./utils";
import { isServer } from "solid-js/web";
/**
 * @displayName Dropdown
 * @public
 */
export function Dropdown(p) {
    // merge in props defaults
    const props = mergeProps({
        itemSelector: `* [${dataAttr("dropdown-item")}]`,
        placement: "bottom-start",
    }, p);
    const window = useWindow();
    const [show, onToggle] = createControlledProp(() => props.show, () => props.defaultShow, props.onToggle);
    const [menuRef, setMenu] = createSignal();
    const [toggleRef, setToggle] = createSignal();
    const [lastSourceEvent, setLastSourceEvent] = createSignal(null);
    const onSelectCtx = useContext(SelectableContext);
    const focusInDropdown = () => menuRef()?.contains(menuRef().ownerDocument.activeElement);
    const toggle = (nextShow, event, source = event?.type) => {
        onToggle(nextShow, { originalEvent: event, source });
    };
    const handleSelect = (key, event) => {
        let result = callEventHandler((event) => {
            props.onSelect?.(key, event);
            toggle(false, event, "select");
        }, event);
        if (!result.isPropagationStopped) {
            onSelectCtx?.(key, event);
        }
    };
    const context = {
        toggle,
        setMenu,
        setToggle,
        get placement() {
            return props.placement;
        },
        get show() {
            return show();
        },
        get menuElement() {
            return menuRef();
        },
        get toggleElement() {
            return toggleRef();
        },
    };
    const focusToggle = () => {
        const ref = toggleRef();
        if (ref && ref.focus) {
            ref.focus();
        }
    };
    const maybeFocusFirst = () => {
        const type = lastSourceEvent();
        setLastSourceEvent(null);
        let focusType = props.focusFirstItemOnShow;
        if (focusType == null) {
            focusType = menuRef() && isRoleMenu(menuRef()) ? "keyboard" : false;
        }
        if (focusType === false || (focusType === "keyboard" && !/^key.+$/.test(type))) {
            return;
        }
        const first = qsa(menuRef(), props.itemSelector)[0];
        if (first && first.focus)
            first.focus();
    };
    createEffect(() => {
        if (show()) {
            maybeFocusFirst();
        }
        else if (focusInDropdown()) {
            focusToggle();
        }
    });
    const getNextFocusedChild = (current, offset) => {
        if (!menuRef())
            return null;
        const items = qsa(menuRef(), props.itemSelector);
        let index = items.indexOf(current) + offset;
        index = Math.max(0, Math.min(index, items.length));
        return items[index];
    };
    const keydownHandler = (event) => {
        const { key } = event;
        const target = event.target;
        const fromMenu = menuRef()?.contains(target);
        const fromToggle = toggleRef()?.contains(target);
        // Second only to https://github.com/twbs/bootstrap/blob/8cfbf6933b8a0146ac3fbc369f19e520bd1ebdac/js/src/dropdown.js#L400
        // in inscrutability
        const isInput = /input|textarea/i.test(target.tagName);
        if (isInput &&
            (key === " " ||
                (key !== "Escape" && fromMenu) ||
                (key === "Escape" && target.type === "search"))) {
            return;
        }
        if (!fromMenu && !fromToggle) {
            return;
        }
        if (key === "Tab" && (!menuRef() || !show)) {
            return;
        }
        setLastSourceEvent(event.type);
        const meta = { originalEvent: event, source: event.type };
        switch (key) {
            case "ArrowUp": {
                const next = getNextFocusedChild(target, -1);
                if (next && next.focus)
                    next.focus();
                event.preventDefault();
                return;
            }
            case "ArrowDown":
                event.preventDefault();
                if (!show) {
                    onToggle(true, meta);
                }
                else {
                    const next = getNextFocusedChild(target, 1);
                    if (next && next.focus)
                        next.focus();
                }
                return;
            case "Tab":
                // on keydown the target is the element being tabbed FROM, we need that
                // to know if this event is relevant to this dropdown (e.g. in this menu).
                // On `keyup` the target is the element being tagged TO which we use to check
                // if focus has left the menu
                if (!isServer) {
                    addEventListener(target.ownerDocument, "keyup", (e) => {
                        if ((e.key === "Tab" && !e.target) || !menuRef()?.contains(e.target)) {
                            onToggle(false, meta);
                        }
                    }, { once: true });
                }
                break;
            case "Escape":
                if (key === "Escape") {
                    event.preventDefault();
                    event.stopPropagation();
                }
                onToggle(false, meta);
                focusToggle();
                break;
            default:
        }
    };
    if (!isServer) {
        window.document.addEventListener("keydown", keydownHandler);
        onCleanup(() => window.document.removeEventListener("keydown", keydownHandler));
    }
    return (<SelectableContext.Provider value={handleSelect}>
      <DropdownContext.Provider value={context}>{props.children}</DropdownContext.Provider>
    </SelectableContext.Provider>);
}
Dropdown.Menu = DropdownMenu;
Dropdown.Toggle = DropdownToggle;
Dropdown.Item = DropdownItem;
export default Dropdown;
