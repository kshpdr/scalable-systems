import { DropdownContextValue } from "./DropdownContext";
import { JSX } from "solid-js";
export declare const isRoleMenu: (el: HTMLElement) => boolean;
export interface UseDropdownToggleProps {
    id: string;
    ref: DropdownContextValue["setToggle"];
    onClick: JSX.EventHandler<HTMLElement, MouseEvent>;
    "aria-expanded": boolean;
    "aria-haspopup": true | undefined;
}
export interface UseDropdownToggleMetadata {
    show: DropdownContextValue["show"];
    toggle: DropdownContextValue["toggle"];
}
/**
 * Wires up Dropdown toggle functionality, returning a set a props to attach
 * to the element that functions as the dropdown toggle (generally a button).
 *
 * @memberOf Dropdown
 */
export declare function useDropdownToggle(): [UseDropdownToggleProps, UseDropdownToggleMetadata];
export interface DropdownToggleProps {
    /**
     * A render prop that returns a Toggle element. The `props`
     * argument should spread through to **a component that can accept a ref**. Use
     * the `onToggle` argument to toggle the menu open or closed
     *
     * @type {Function ({
     *   props: {
     *     ref: (?HTMLElement) => void,
     *     aria-haspopup: true
     *     aria-expanded: boolean
     *   },
     *   meta: {
     *     show: boolean,
     *     toggle: (show: boolean) => void,
     *   }
     * }) => Element}
     */
    children: (props: UseDropdownToggleProps, meta: UseDropdownToggleMetadata) => JSX.Element;
}
/**
 * Also exported as `<Dropdown.Toggle>` from `Dropdown`.
 *
 * @displayName DropdownToggle
 * @memberOf Dropdown
 */
export declare function DropdownToggle({ children }: DropdownToggleProps): JSX.Element;
/** @component */
export default DropdownToggle;
