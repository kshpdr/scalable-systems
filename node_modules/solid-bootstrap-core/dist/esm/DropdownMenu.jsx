import DropdownContext from "./DropdownContext";
import usePopper from "./usePopper";
import useClickOutside from "./useClickOutside";
import mergeOptionsWithPopperConfig from "./mergeOptionsWithPopperConfig";
import { createComputed, createEffect, createMemo, createSignal, mergeProps, splitProps, useContext, } from "solid-js";
import { createStore, reconcile } from "solid-js/store";
const noop = () => { };
/**
 * @memberOf Dropdown
 * @param {object}  options
 * @param {boolean} options.flip Automatically adjust the menu `drop` position based on viewport edge detection
 * @param {[number, number]} options.offset Define an offset distance between the Menu and the Toggle
 * @param {boolean} options.show Display the menu manually, ignored in the context of a `Dropdown`
 * @param {boolean} options.usePopper opt in/out of using PopperJS to position menus. When disabled you must position it yourself.
 * @param {string}  options.rootCloseEvent The pointer event to listen for when determining "clicks outside" the menu for triggering a close.
 * @param {object}  options.popperConfig Options passed to the [`usePopper`](/api/usePopper) hook.
 */
export function useDropdownMenu(o = {}) {
    const context = useContext(DropdownContext);
    const [arrowElement, attachArrowRef] = createSignal();
    const [hasShownRef, setHasShownRef] = createSignal(false);
    const [popperOptions, setPopperOptions] = createStore({});
    // merge in option defaults
    const options = mergeProps({
        fixed: false,
        popperConfig: {},
        usePopper: !!context,
    }, o);
    const show = createMemo(() => {
        return context?.show == null ? !!options.show : context.show;
    });
    createEffect(() => {
        if (show() && !hasShownRef()) {
            setHasShownRef(true);
        }
    });
    /** sync popper with options */
    createComputed(() => {
        setPopperOptions(reconcile(mergeOptionsWithPopperConfig({
            placement: options.placement || context?.placement || "bottom-start",
            enabled: options.usePopper ?? !!context,
            enableEvents: options.enableEventListeners == null ? show() : options.enableEventListeners,
            offset: options.offset,
            flip: options.flip,
            fixed: options.fixed,
            arrowElement: arrowElement(),
            popperConfig: options.popperConfig,
        })));
    });
    const handleClose = (e) => {
        context?.toggle(false, e);
    };
    const popper = usePopper(() => context?.toggleElement, () => context?.menuElement, popperOptions);
    createEffect(() => {
        if (context?.menuElement) {
            useClickOutside(() => context.menuElement, handleClose, {
                get clickTrigger() {
                    return options.rootCloseEvent;
                },
                get disabled() {
                    return !show();
                },
            });
        }
    });
    const menuProps = mergeProps({
        get ref() {
            return context?.setMenu || noop;
        },
        get style() {
            return popper()?.styles.popper;
        },
        get "aria-labelledby"() {
            return context?.toggleElement?.id;
        },
    }, popper()?.attributes.popper ?? {});
    const metadata = {
        get show() {
            return show();
        },
        get placement() {
            return context?.placement;
        },
        get hasShown() {
            return hasShownRef();
        },
        get toggle() {
            return context?.toggle;
        },
        get popper() {
            return options.usePopper ? popper() : null;
        },
        get arrowProps() {
            return options.usePopper
                ? {
                    ref: attachArrowRef,
                    ...popper()?.attributes.arrow,
                    style: popper()?.styles.arrow,
                }
                : {};
        },
    };
    return [menuProps, metadata];
}
/**
 * Also exported as `<Dropdown.Menu>` from `Dropdown`.
 *
 * @displayName DropdownMenu
 * @memberOf Dropdown
 */
export function DropdownMenu(p) {
    const [local, options] = splitProps(p, ["children"]);
    const [props, meta] = useDropdownMenu(options);
    return <>{local.children(props, meta)}</>;
}
/** @component */
export default DropdownMenu;
