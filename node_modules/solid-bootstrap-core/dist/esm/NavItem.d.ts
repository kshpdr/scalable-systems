import { EventKey } from "./types";
import { JSX, ValidComponent } from "solid-js";
export interface NavItemProps extends JSX.HTMLAttributes<HTMLElement> {
    /**
     * Highlight the NavItem as active.
     */
    active?: boolean;
    /**
     * Element used to render the component.
     */
    as?: ValidComponent;
    /**
     * Disable the NavItem, making it unselectable.
     */
    disabled?: boolean;
    /**
     * Value passed to the `onSelect` handler, useful for identifying the selected NavItem.
     */
    eventKey?: EventKey;
    /**
     * HTML `href` attribute corresponding to `a.href`.
     */
    href?: string;
}
export interface UseNavItemOptions {
    key?: string | null;
    onClick?: JSX.EventHandlerUnion<any, MouseEvent>;
    active?: boolean;
    disabled?: boolean;
    id?: string;
    role?: string;
}
export declare function useNavItem(options: UseNavItemOptions): readonly [{
    readonly role: string | undefined;
    readonly id: string | undefined;
    readonly tabIndex: -1 | undefined;
    readonly "aria-controls": string | undefined;
    readonly "aria-disabled": true | undefined;
    readonly "aria-selected": true | undefined;
    readonly onClick: (e: MouseEvent) => void;
}, {
    readonly isActive: boolean | undefined;
}];
export declare const NavItem: (p: NavItemProps) => JSX.Element;
export default NavItem;
