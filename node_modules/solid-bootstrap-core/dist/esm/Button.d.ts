import { JSX } from "solid-js";
export type ButtonType = "button" | "reset" | "submit";
export interface AnchorOptions {
    href?: string;
    rel?: string;
    target?: string;
}
export interface UseButtonPropsOptions<T extends HTMLElement> extends AnchorOptions {
    type?: ButtonType;
    disabled?: boolean;
    onClick?: JSX.EventHandlerUnion<T, MouseEvent>;
    tabIndex?: string | number;
    tagName?: keyof JSX.IntrinsicElements;
}
export declare function isTrivialHref(href?: string): boolean;
export interface AriaButtonProps<T> {
    type?: ButtonType | undefined;
    disabled: boolean | undefined;
    role?: "button";
    tabIndex?: string | number | undefined;
    href?: string | undefined;
    target?: string | undefined;
    rel?: string | undefined;
    "aria-disabled"?: true | undefined;
    onClick?: JSX.EventHandler<T, MouseEvent>;
    onKeyDown?: JSX.EventHandler<T, KeyboardEvent>;
}
export interface UseButtonPropsMetadata {
    tagName: keyof JSX.IntrinsicElements;
}
export declare function useButtonProps<T extends HTMLElement>(o: UseButtonPropsOptions<T>): [AriaButtonProps<T>, UseButtonPropsMetadata];
export interface BaseButtonProps {
    /**
     * Control the underlying rendered element directly by passing in a valid
     * component type
     */
    as?: keyof JSX.IntrinsicElements;
    /** The disabled state of the button */
    disabled?: boolean | undefined;
    /** Optionally specify an href to render a `<a>` tag styled as a button */
    href?: string | undefined;
    /** Anchor target, when rendering an anchor as a button */
    target?: string | undefined;
    rel?: string | undefined;
}
export interface ButtonProps extends BaseButtonProps, JSX.HTMLAttributes<HTMLButtonElement> {
}
export declare const Button: (props: ButtonProps) => JSX.Element;
export default Button;
